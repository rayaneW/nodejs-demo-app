name: Terraform Deploy + Docker App

on:
  workflow_dispatch:   # handmatig triggerbaar
  push:
    branches:
      - main

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve

      - name: Get Public IP
        id: ec2
        run: echo "PUBLIC_IP=$(terraform output -raw public_ip)" >> $GITHUB_ENV

  deploy:
    name: Deploy App via SSH
    runs-on: ubuntu-latest
    needs: terraform
    env:
      PUBLIC_IP: ${{ env.PUBLIC_IP }}
      SSH_USER: ubuntu
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Prepare SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Deploy Docker Container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.PUBLIC_IP }} << 'EOF'
            set -e
            cd /home/ubuntu || mkdir -p /home/ubuntu && cd /home/ubuntu
            if [ ! -d app/.git ]; then
              git clone https://github.com/${GITHUB_REPOSITORY}.git app
            else
              cd app
              git pull
            fi
            cd app
            sudo docker build -t myapp .
            sudo docker stop myapp || true
            sudo docker rm myapp   || true
            sudo docker run -d -p 5000:5000 --name myapp myapp
          EOF
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
